name: 컨테이너 기반 배포하기

on:
  push:
    branches:
      - main

jobs:
  Auto-Deploy-Job:
    runs-on: ubuntu-latest

    steps:
      - name: Github Repository 의 파일 가져오기
        uses: actions/checkout@v4

      - name: JDK 17 설치
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17

      - name: application.yml 파일 생성
        run: |
          echo "${{ secrets.APPLICATION_YML }}" > ./src/main/resources/application.yml

      - name: 빌드하기
        run: |
          chmod +x ./gradlew
          ./gradlew clean build
#
#      - name: 빌드된 파일 이름 변경하기
#        run:
#          mv ./build/libs/*AWS_CICD.jar ./app.jar

      - name: AWS ECR 접근하기 위한 AWS credential 설정
        uses: aws-actions/configure-aws-credentials@v4
        with:
            aws-region: ap-northeast-2
            aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
            aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      - name: AWS ECR에 로그인하기
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
      - name: Docker 이미지 생성
        run: |
          docker build -t web-server .
          docker tag web-server ${{ steps.login-ecr.outputs.registry }}/web-server:latest

      - name: ECR에 Docker 이미지 push
        run: docker push ${{ steps.login-ecr.outputs.registry }}/web-server:latest

      - name: SSH로 EC2에 접속
        uses: appleboy/ssh-action@v1.0.3
        with:
            host: ${{ secrets.EC2_HOST }}
            username: ${{ secrets.EC2_USERNAME }}
            key: ${{ secrets.EC2_PRIVATE_KEY }}
            script_stop: true
            script: |
              docker stop web-server || true
              docker rm web-server || true   
              docker pull ${{ steps.login-ecr.outputs.registry }}/web-server:latest
              docker run -d --name web-server -p 8080:8080 ${{ steps.login-ecr.outputs.registry }}/web-server:latest
#      - name: 빌드된 파일 이름 변경하기
#        run:
#          mv ./build/libs/*AWS_CICD.jar ./app.jar
#
#      - name: SCP로 EC2에 jar 파일 전송
#        uses: appleboy/scp-action@v0.1.7
#        with:
#          host: ${{ secrets.EC2_HOST }}
#          username: ${{ secrets.EC2_USERNAME }}
#          key: ${{ secrets.EC2_PRIVATE_KEY }}
#          source: ./app.jar
#          target: /home/ubuntu/project/tobe
#
#      - name: SSH로 EC2에 접속하기
#        uses: appleboy/ssh-action@v1.0.3
#        with:
#          host: ${{ secrets.EC2_HOST }}
#          username: ${{ secrets.EC2_USERNAME }}
#          key: ${{ secrets.EC2_PRIVATE_KEY }}
#          script_stop: true
#          script: |
#            rm -rf /home/ubuntu/project/cur
#            mkdir /home/ubuntu/project/cur
#            mv /home/ubuntu/project/tobe/app.jar /home/ubuntu/project/cur/app.jar
#            cd /home/ubuntu/project/cur
#            sudo fuser -k -n tcp 8080 || true
#            sudo nohup java -jar app.jar > ./output.log 2>&1 &
#            rm -rf /home/ubuntu/project/tobe